{"version":3,"sources":["components/Office.js","components/Department.js","App.js","serviceWorker.js","index.js"],"names":["Office","state","txt","suggestions","onTextChanged","e","items","_this","props","value","target","name","map","item","length","regex","RegExp","concat","sort","filter","v","test","setState","amountChange","Number","amount","parseFloat","toFixed","Math","floor","onAmountChange","this","currency","onCurrencyChange","_this2","_this$state","react_default","a","createElement","Fragment","isNaN","type","onChange","required","placeholder","style","borderBottom","key","uuid","onClick","suggestionSelected","Component","Department","error","isLoading","change","currency_1","currency_2","handleChange_1Change","handleChange_2Change","handleCurrency_1Change","handleCurrency_2Change","hryvnia","r030","rate","cc","exchangedate","itemsList","fetch","then","response","json","data","Object","toConsumableArray","catch","officeUser_1","officeUser_2","tryConvert","convert","input","output","round","toString","change_1","change_2","user1","user2","message","className","components_Office","App","components_Department","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7b292be.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport uuid from 'uuid';\r\n\r\nclass Office extends Component {\r\n    state = {\r\n        txt: '',\r\n        suggestions: []\r\n    };\r\n\r\n    onTextChanged = e => {\r\n        const {items} = this.props;\r\n        const value = e.target.value;\r\n        const name = items.map(item => item.txt);\r\n        let suggestions = [];\r\n        if (value.length > 0) {\r\n            const regex = new RegExp(`^${value}`, 'i');\r\n            suggestions = name.sort().filter(v => regex.test(v));\r\n            // suggestions = name.match(/\\b(\\w)/g);\r\n        }\r\n        this.setState(() => ({suggestions, txt: value}));\r\n    }\r\n\r\n    amountChange = e => {\r\n        const value = e.target.value;\r\n        if (Number(value) !== 0) {\r\n            const amount = value < parseFloat(value).toFixed(3)\r\n                ? value\r\n                : parseFloat(Math.floor(value * 100) / 100).toFixed(2);\r\n            this.props.onAmountChange(amount);\r\n        } else {\r\n            this.props.onAmountChange('');\r\n        }\r\n    }\r\n\r\n    suggestionSelected(value) {\r\n        this.setState(() => ({\r\n            txt: value,\r\n            suggestions: []\r\n        }))\r\n        const currency = value;\r\n        this.props.onCurrencyChange(currency);\r\n    }\r\n\r\n    render() {\r\n        const {suggestions, txt} = this.state;\r\n        const {amount} = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                <input value={isNaN(amount) || amount === ' ' ? '' : amount} type=\"text\"\r\n                       onChange={this.amountChange} required=\"required\"\r\n                       placeholder={\"Your amount\"} style={{borderBottom: \"1.3px solid #09BF72\"}}/>\r\n                <input value={txt} type=\"text\" onChange={this.onTextChanged}\r\n                       placeholder={\"Your currency\"} required=\"required\"/>\r\n                <ul>\r\n                    {suggestions.length !== 0\r\n                        ? (suggestions.map(item =>\r\n                            <li key={uuid()} onClick={() => this.suggestionSelected(item)}>\r\n                                {item}\r\n                            </li>))\r\n                        : null}\r\n                </ul>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nOffice.propTypes = {\r\n    amount: PropTypes.string.isRequired,\r\n    items: PropTypes.array.isRequired,\r\n    onAmountChange: PropTypes.func.isRequired,\r\n    onCurrencyChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Office;\r\n\r\n\r\n","import React, {Component} from 'react'\r\nimport Office from './Office';\r\nimport '../style/Office.css'\r\n\r\nclass Department extends Component {\r\n    state = {\r\n        error: null,\r\n        isLoading: true,\r\n        items: [],\r\n        change: '1',\r\n        amount: '',\r\n        currency_1: '',\r\n        currency_2: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        const hryvnia = {\r\n            r030: 100,\r\n            txt: \"Українська гривня\",\r\n            rate: 1,\r\n            cc: \"UAH\",\r\n            exchangedate: \"forever\"\r\n        }\r\n        this.itemsList = fetch('https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json')\r\n            .then(response => response.json())\r\n            .then(\r\n                (data) => {\r\n                    this.setState({\r\n                        items: [hryvnia, ...data],\r\n                        isLoading: false\r\n                    });\r\n                }\r\n            )\r\n            .catch(error => this.setState({error, isLoading: false}));\r\n    }\r\n\r\n    handleChange_1Change = (amount) => {\r\n        this.setState({change: '1', amount})\r\n    }\r\n    handleChange_2Change = (amount) => {\r\n        this.setState({change: '2', amount})\r\n    }\r\n    handleCurrency_1Change = (currency) => {\r\n        this.setState({currency_1: currency})\r\n    }\r\n    handleCurrency_2Change = (currency) => {\r\n        this.setState({currency_2: currency})\r\n    }\r\n\r\n    render() {\r\n        const {isLoading, items, error, change, amount, currency_1, currency_2} = this.state;\r\n\r\n        // conditions for change\r\n        const officeUser_1 = (data, currency) => {\r\n            if (!(currency_1 && currency_2)) {\r\n                return '';\r\n            }\r\n            const office_1 = items.filter(item => item.txt === currency_1);\r\n            const rate_1 = office_1.map(item => item.rate);\r\n            return rate_1;\r\n        }\r\n        const officeUser_2 = (data, currency) => {\r\n            if (!(currency_1 && currency_2)) {\r\n                return '';\r\n            }\r\n            const office_2 = items.filter(item => item.txt === currency_2);\r\n            const rate_2 = office_2.map(item => item.rate);\r\n            return rate_2;\r\n        }\r\n\r\n        //change\r\n        const toChange_1 = (change_2, user1, user2) => {\r\n            return (change_2 * officeUser_2()) / officeUser_1();\r\n        };\r\n        const toChange_2 = (change_1, user1, user2) => {\r\n            return (change_1 * officeUser_1()) / officeUser_2();\r\n        };\r\n\r\n        const tryConvert = (amount, convert) => {\r\n            const input = parseFloat(amount);\r\n            if (Number.isNaN(input)) {\r\n                return '';\r\n            }\r\n            const output = convert(input);\r\n            const rounded = (Math.round(output * 100) / 100).toFixed(2);\r\n            return rounded.toString();\r\n        };\r\n\r\n        const change_1 = change === '2' ? tryConvert(amount, toChange_1) : amount;\r\n        const change_2 = change === '1' ? tryConvert(amount, toChange_2) : amount;\r\n\r\n        const data = data => {\r\n            return items.map(item => item.r030 === 840 ? item.exchangedate : '')\r\n            // items.forEach((item) => {\r\n            //     // if(item.r030 === 840) {\r\n            //     //     var day = item.exchangedate\r\n            //     // }\r\n            //     // console.log(item.r030 === 840 ? item.exchangedate : '');\r\n            //     return item.r030 === 840 ? item.exchangedate : '';\r\n            // })\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {/* Display a message if we encounter an error*/}\r\n                {error ? <p>{error.message}</p> : null}\r\n                {/* Here's the data check*/}\r\n                {!isLoading ? (\r\n                    <React.Fragment>\r\n                        <h4 className=\"Items-Data\"> as at {data()}</h4>\r\n                        <div className=\"App-Container\">\r\n                            <div className=\"App-Component\">\r\n                                <div className=\"Box\">\r\n                                    <Office\r\n                                        items={items}\r\n                                        amount={change_1}\r\n                                        // currency={currency_1}\r\n                                        onAmountChange={this.handleChange_1Change}\r\n                                        onCurrencyChange={this.handleCurrency_1Change}/>\r\n                                </div>\r\n                            </div>\r\n                            <h2>=</h2>\r\n                            <div className=\"App-Component\">\r\n                                <div className=\"Box\">\r\n                                    <Office\r\n                                        items={items}\r\n                                        amount={change_2}\r\n                                        // currency={currency_2}\r\n                                        onAmountChange={this.handleChange_2Change}\r\n                                        onCurrencyChange={this.handleCurrency_2Change}/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </React.Fragment>\r\n                ) : (\r\n                    // If there is a delay in data, let's let the user know it's loading\r\n                    <h3>Loading...</h3>\r\n                )}\r\n                <p>{items.map(item => item.txt + ', ')}</p>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Department;\r\n","import React, {Component} from 'react';\nimport Department from './components/Department';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <h6><b>National Bank of Ukraine</b></h6>\n                <h2>The official exchange rate of currencies</h2>\n                <Department/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}